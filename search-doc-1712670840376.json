[{"title":"Customizing","type":0,"sectionRef":"#","url":"/docs/customizing","content":"","keywords":""},{"title":"Item Managers​","type":1,"pageTitle":"Customizing","url":"/docs/customizing#item-managers","content":"All ItemManagers have a .Assets.Slot property where you can put your own custom CanvasGroups, these CanvasGroups can have anything parented to them. "},{"title":"Items​","type":1,"pageTitle":"Customizing","url":"/docs/customizing#items","content":"Like the ItemManagers, the Items also has a .Assets.Item property where you also can add your own CanvasGroups. Although all Item assets require a transparent TextButton or ImageButton named InteractionButton to be able to detect any mouse inputs. "},{"title":"Examples​","type":1,"pageTitle":"Customizing","url":"/docs/customizing#examples","content":"Here are some examples of how the properties will be setup: "},{"title":"Grid/SingleSlot Asset Property​","type":1,"pageTitle":"Customizing","url":"/docs/customizing#gridsingleslot-asset-property","content":"local myFirstGrid = GridPack.createGrid({ Assets = { Slot = [[Insert CanvasGroup here]], }, })  "},{"title":"Item Asset Property​","type":1,"pageTitle":"Customizing","url":"/docs/customizing#item-asset-property","content":"local myFirstItem = GridPack.createItem({ Assets = { Item = [[Insert CanvasGroup here]], }, })  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#installation","content":"Choose an installation method: "},{"title":"Roblox Studio​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#roblox-studio","content":"Get the latest release from the Github. Then right click on ReplicatedStorage and choose Insert from File... and choose the downloaded .rbxm file. If you've done everything correctly you should now have a Packages folder with GridPack inside!  "},{"title":"Wally​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#wally","content":"Get the latest wally package here! "},{"title":"Pre-release Statement​","type":1,"pageTitle":"Getting Started","url":"/docs/intro#pre-release-statement","content":"GridPack is in a pre-release state and is not yet quite ready for production! But once GridPack hits v1.0.0 it means no more alpha state! If you find any bugs, please report them in the Issues tab in the repository. There may also be missing features at the moment, so please write a suggestion (which can also be done in the Issues tab) or add the feature yourself and submit a pull request! "},{"title":"Grid","type":0,"sectionRef":"#","url":"/api/Grid","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Grid","url":"/api/Grid#properties","content":" "},{"title":"GuiElement​","type":1,"pageTitle":"Grid","url":"/api/Grid#GuiElement","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Grid.GuiElement: GuiObject    "},{"title":"SlotElements​","type":1,"pageTitle":"Grid","url":"/api/Grid#SlotElements","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Grid.SlotElements: {GuiObject }   "},{"title":"GridSize​","type":1,"pageTitle":"Grid","url":"/api/Grid#GridSize","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Grid.GridSize: Vector2    "},{"title":"SlotAspectRatio​","type":1,"pageTitle":"Grid","url":"/api/Grid#SlotAspectRatio","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Grid.SlotAspectRatio: number   "},{"title":"Items​","type":1,"pageTitle":"Grid","url":"/api/Grid#Items","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Grid.Items: {ItemObject}   "},{"title":"ItemAdded​","type":1,"pageTitle":"Grid","url":"/api/Grid#ItemAdded","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Grid.ItemAdded: RBXScriptSignal  An event signal that fires every time a new Item is added to the Grid.  "},{"title":"ItemRemoved​","type":1,"pageTitle":"Grid","url":"/api/Grid#ItemRemoved","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Grid.ItemRemoved: RBXScriptSignal  An event signal that fires every time an Item is removed from the Grid. "},{"title":"Functions​","type":1,"pageTitle":"Grid","url":"/api/Grid#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Grid","url":"/api/Grid#new","content":"&lt;/&gt; Grid.new(properties: Types.GridProperties) → Types.GridObject Create a new Grid ItemManager object.  "},{"title":"GetSizeScale​","type":1,"pageTitle":"Grid","url":"/api/Grid#GetSizeScale","content":"ItemManager Override &lt;/&gt; Grid:GetSizeScale() → Vector2  Gets the AbsoluteSize of one slot.  "},{"title":"GetAbsoluteSizeFromItemSize​","type":1,"pageTitle":"Grid","url":"/api/Grid#GetAbsoluteSizeFromItemSize","content":"ItemManager Override &lt;/&gt; Grid:GetAbsoluteSizeFromItemSize( itemSize: Vector2 , itemRotation: number ) → Vector2  Gets the AbsoluteSize of an Item with the ItemManager's size scale.  "},{"title":"GetItemManagerPositionFromAbsolutePosition​","type":1,"pageTitle":"Grid","url":"/api/Grid#GetItemManagerPositionFromAbsolutePosition","content":"ItemManager Override &lt;/&gt; Grid:GetItemManagerPositionFromAbsolutePosition( absolutePosition: Vector2 , itemSize: Vector2 , itemRotation: number ) → Vector2  Converts an AbsolutePosition to a ItemManager position.  "},{"title":"GetNextFreePositionForItem​","type":1,"pageTitle":"Grid","url":"/api/Grid#GetNextFreePositionForItem","content":"&lt;/&gt; Grid:GetNextFreePositionForItem(item: Types.ItemObject) → Vector2?  Gets the next position in a Grid where the item doesn't collide with anything.  "},{"title":"GetItemsInRegion​","type":1,"pageTitle":"Grid","url":"/api/Grid#GetItemsInRegion","content":"&lt;/&gt; Grid:GetItemsInRegion( position: Vector2 , size: Vector2 , rotation: number, ignoredItems: {Types.ItemObject} ) → {Types.ItemObject} Gets all of the Items in the secified region.  "},{"title":"IsColliding​","type":1,"pageTitle":"Grid","url":"/api/Grid#IsColliding","content":"ItemManager Override &lt;/&gt; Grid:IsColliding( item: Types.ItemObject, ignoredItems: {Types.ItemObject}, at: Vector2? , withRotation: number? ) → boolean Checks if an Item is colliding. Use the at parameter to override the collision check position, else it will use the Item's position.  "},{"title":"IsRegionInBounds​","type":1,"pageTitle":"Grid","url":"/api/Grid#IsRegionInBounds","content":"&lt;/&gt; Grid:IsRegionInBounds( position: Vector2 , size: Vector2 , rotation: number ) → boolean Checks if a region is in the bounds of the Grid.  "},{"title":"SortItemsByVolume​","type":1,"pageTitle":"Grid","url":"/api/Grid#SortItemsByVolume","content":"&lt;/&gt; Grid:SortItemsByVolume() → () Sorts all of the items by volume (Volume = Size.X * Size.Y).  "},{"title":"AddItem​","type":1,"pageTitle":"Grid","url":"/api/Grid#AddItem","content":"&lt;/&gt; Grid:AddItem( item: Types.ItemObject, at: Vector2? , useTween: boolean? ) → () Adds an item to the grid. Use optional at parameter for overriding the Item's position.  "},{"title":"RemoveItem​","type":1,"pageTitle":"Grid","url":"/api/Grid#RemoveItem","content":"ItemManager Override &lt;/&gt; Grid:RemoveItem(item: Types.ItemObject) → () Removes an item from the Grid.  "},{"title":"ClearItems​","type":1,"pageTitle":"Grid","url":"/api/Grid#ClearItems","content":"&lt;/&gt; Grid:ClearItems(destroyItems: boolean?) → () Removes all of the Items in the grid. "},{"title":"Server Communication","type":0,"sectionRef":"#","url":"/docs/servercommunication","content":"Server Communication Since GridPack doesn't handle the server-side for you, items come with the .MoveMiddleware property which is run before the item actually gets moved on the client. And you can use this property to validate your item movements by return true or false is the movement is valid. Item collision is still checked before .MoveMiddleware but it's also good to check for collision on the server to prevent cheating or client desync. Here's and example of how client to server communication would work: local item = GridPack.createItem({ -- Other Item properties MoveMiddleware = function(movedItem, newGridPosition, newRotation, lastItemManager, newItemManager) --[[ movedItem: This Item newGridPosition: This Item's new position in a Grid. (Doesn't apply with SingleSlots) newRotation: This Item's new rotation. lastItemManager: The ItemManager that the Item was in before it got moved. newItemManager: The new ItemManager the item was moved to. (If there is one) ]] if newItemManager then -- Ask server to validate the Item movement between ItemManagers and return the result to the Item return ReplicatedStorage.Remotes.MoveItemAcrossItemManager:InvokeServer() else -- Ask server to validate the Item movement between positions and return the result to the Item return ReplicatedStorage.Remotes.MoveItem:InvokeServer() end -- If the result if false then the Item will move back to it's last position. end, Metadata = { -- Tip: Here you can any values you need for MoveMiddleware! }, -- Other Item properties }) ","keywords":""},{"title":"Connecting ItemManagers","type":0,"sectionRef":"#","url":"/docs/connection","content":"Connecting ItemManagers To connect two item managers together you use a TransferLink. Both Grids and SingleSlots can be connected to eachother and Grid to SingleSlot. This is done like: -- Continuing from last example. local transferGrid = GridPack.createGrid({ Parent = screenGui, Visible = true, GridSize = Vector2.new(8, 15), SlotAspectRatio = 1, AnchorPoint = Vector2.new(1, 0.5), Position = UDim2.new(1, -20, 0.5, 0), Size = UDim2.fromScale(0.25, 0.5), }) local transferLink = GridPack.createTransferLink({}) -- Create TransferLink myFirstGrid:ConnectTransferLink(transferLink) -- Connect TransferLink to our first grid. transferGrid:ConnectTransferLink(transferLink) -- Connect the TransferLink to our new grid. You will now be able to drag an item over to the other inventory and it should adjust to the new inventory.","keywords":""},{"title":"Other ItemManager Types","type":0,"sectionRef":"#","url":"/docs/itemmanagers","content":"","keywords":""},{"title":"Single Slots​","type":1,"pageTitle":"Other ItemManager Types","url":"/docs/itemmanagers#single-slots","content":"With SingleSlots you are able to drag any item into it, disreguarding the size and position of the item. This can for example, be used as an equip slot where you have your primary weapon, tool or armor stored. The SingleSlot setup is a little different than the Grid setup. Here is an example: local GridPack = require(game:GetService(&quot;ReplicatedStorage&quot;).Packages.GridPack) local screenGui = Instance.new(&quot;ScreenGui&quot;) screenGui.Name = &quot;GridPack&quot; screenGui.ResetOnSpawn = false screenGui.Parent = game:GetService(&quot;Players&quot;).LocalPlayer.PlayerGui local singleSlot = GridPack.createSingleSlot({ Parent = screenGui, -- Parent of the slot container Visible = true, -- If the slot is visible, changes the containers visible property. Also disables item interaction on the item inside. Assets = { Slot = nil, -- Add your own CanvasGroup here to customize the slot. }, AnchorPoint = Vector2.new(0, 0.5), -- Anchor point of the slot container Position = UDim2.new(0, 20, 0.5, 0), -- Position of the slot container Size = UDim2.fromScale(0.25, 0.5), -- Size of the slot container Metadata = { -- Here you are free to store any values you want. }, })  "},{"title":"TransferLink","type":0,"sectionRef":"#","url":"/api/TransferLink","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"TransferLink","url":"/api/TransferLink#properties","content":" "},{"title":"ConnectedItemMangers​","type":1,"pageTitle":"TransferLink","url":"/api/TransferLink#ConnectedItemMangers","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TransferLink.ConnectedItemMangers: {ItemManagerObject} All of the ItemManagers that the TranferLink has linked together. Should not be edited and only read from. To connect an ItemManager to a TransferLink use: ItemManager:ConnectTransferLink(TransferLink) "},{"title":"Functions​","type":1,"pageTitle":"TransferLink","url":"/api/TransferLink#functions","content":" "},{"title":"new​","type":1,"pageTitle":"TransferLink","url":"/api/TransferLink#new","content":"&lt;/&gt; TransferLink.new(properties: Types.TransferLinkProperties) → Types.TransferLinkObject Create a new TransferLink object.  "},{"title":"GetItemOverlappingItemManagers​","type":1,"pageTitle":"TransferLink","url":"/api/TransferLink#GetItemOverlappingItemManagers","content":"&lt;/&gt; TransferLink:GetItemOverlappingItemManagers(item: Types.ItemObject) → {Types.ItemManagerObject} Get the ItemManagers that the Item is hovering over.  "},{"title":"GetClosestItemOverlappingItemManagers​","type":1,"pageTitle":"TransferLink","url":"/api/TransferLink#GetClosestItemOverlappingItemManagers","content":"&lt;/&gt; TransferLink:GetClosestItemOverlappingItemManagers(item: Types.ItemObject) → {Types.ItemManagerObject} Same as TransferLink:GetItemOverlappingItemManagers() but sorts the ItemManagers by distance from nearest to furthest. "},{"title":"SingleSlot","type":0,"sectionRef":"#","url":"/api/SingleSlot","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#properties","content":" "},{"title":"GuiElement​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#GuiElement","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SingleSlot.GuiElement: GuiObject  The SingleSlot's GUI element.  "},{"title":"Item​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#Item","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SingleSlot.Item: ItemObject The current Item in the SingleSlot.  "},{"title":"ItemChanged​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#ItemChanged","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; SingleSlot.ItemChanged: RBXScriptSignal  An event signal that fires every time a new Item replaces the old Item. "},{"title":"Functions​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#new","content":"&lt;/&gt; SingleSlot.new(properties: Types.SingleSlotProperties) → Types.SingleSlotObject Creates a new SingleSlot ItemManager object.  "},{"title":"GetOffset​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#GetOffset","content":"ItemManager Override &lt;/&gt; SingleSlot:GetOffset(itemRotation: number) → Vector2  Gets the AbsolutePosition property from the ItemManager's GUI element.  "},{"title":"GetSizeScale​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#GetSizeScale","content":"ItemManager Override &lt;/&gt; SingleSlot:GetSizeScale() → Vector2  Gets the AbsoluteSize of the slot.  "},{"title":"GetAbsoluteSizeFromItemSize​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#GetAbsoluteSizeFromItemSize","content":"ItemManager Override &lt;/&gt; SingleSlot:GetAbsoluteSizeFromItemSize( itemSize: Vector2 , itemRotation: number ) → Vector2  Gets the AbsoluteSize of an Item with the ItemManager's size scale.  "},{"title":"GetItemManagerPositionFromAbsolutePosition​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#GetItemManagerPositionFromAbsolutePosition","content":"ItemManager Override &lt;/&gt; SingleSlot:GetItemManagerPositionFromAbsolutePosition( absolutePosition: Vector2 , itemSize: Vector2 , itemRotation: number ) → Vector2  Converts an AbsolutePosition to a ItemManager position.  "},{"title":"IsColliding​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#IsColliding","content":"ItemManager Override &lt;/&gt; SingleSlot:IsColliding( item: Types.ItemObject, ignoredItems: {Types.ItemObject}, at: Vector2? ) → boolean Checks if an Item is colliding. Use the at parameter to override the collision check position, else it will use the Item's position.  "},{"title":"ChangeItem​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#ChangeItem","content":"ItemManager Override &lt;/&gt; SingleSlot:ChangeItem(item: Types.ItemObject) → () Changes the current item in the SingleSlot.  "},{"title":"RemoveItem​","type":1,"pageTitle":"SingleSlot","url":"/api/SingleSlot#RemoveItem","content":"ItemManager Override &lt;/&gt; SingleSlot:RemoveItem() → () Removes the item from the SingleSlot. "},{"title":"Basic Inventory","type":0,"sectionRef":"#","url":"/docs/basics","content":"","keywords":""},{"title":"Creating Your First Grid​","type":1,"pageTitle":"Basic Inventory","url":"/docs/basics#creating-your-first-grid","content":"When creating your first Grid ItemManager the .createGrid() method will be your friend! With it you will want to specify all of the different properties of your Grid. If you've ever used Roact or Fusion this may seem familiar. Here is an example of it in action: local GridPack = require(game:GetService(&quot;ReplicatedStorage&quot;).Packages.GridPack) local screenGui = Instance.new(&quot;ScreenGui&quot;) screenGui.Name = &quot;GridPack&quot; screenGui.ResetOnSpawn = false screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling screenGui.Parent = game:GetService(&quot;Players&quot;).LocalPlayer.PlayerGui local myFirstGrid = GridPack.createGrid({ Parent = screenGui, -- Parent of the grid container. Visible = true, -- If the grid is visible, changes the containers visible property. Also disables item interaction on all items inside. BY DEFAULT THIS IS SET TO FALSE to prevent the inventory being shown when first creating the Grid. Assets = { Slot = nil, -- Add your own CanvasGroup here to customize the slots in the grid. }, GridSize = Vector2.new(8, 15), -- How many slots the grid has on the X and Y axes. SlotAspectRatio = 1, -- Aspect ratio of one slot in the grid, helps with different resolutions if you're using scale instead of offset. AnchorPoint = Vector2.new(0, 0.5), -- Anchor point of the grid container. Position = UDim2.new(0, 20, 0.5, 0), -- Position of the grid container. Size = UDim2.fromScale(0.25, 0.5), -- Size of the grid container. Metadata = { -- Here you are free to store any values you want. }, })  You should now have a Grid on your screen once you join the game!  danger If the example above doesn't work for you, please check that the script is a LocalScript and is located in a client script compatible directory (StarterPlayer.StarterPlayerScripts is recommended!). If it still doesn't work, please make sure that the script is not a normal script with RunContext set to Client, and is instead a LocalScript! "},{"title":"Adding Items​","type":1,"pageTitle":"Basic Inventory","url":"/docs/basics#adding-items","content":"Adding items to grids is straight forward. But before adding an Item you will ofcourse have to create it! This is done in a simmilar way as creating a grid, only instead you use the .createItem() method which also comes with different properties. Here is an example showing an item being created and added to the grid we just created: -- Continuing from last example. local myFirstItem = GridPack.createItem({ Position = Vector2.new(0, 0), -- Position in a Grid. Size = Vector2.new(2, 3), -- Size in a Grid. Assets = { Item = nil, -- Add a custom CanvasGroup here to change the item's gui element. (See customizing guide for more info) }, Metadata = { -- Here you are free to store any values you want. }, }) myFirstGrid:AddItem(myFirstItem) -- Add the item to the Grid.  The item should now be added to the grid and should also be draggable!  "},{"title":"Item","type":0,"sectionRef":"#","url":"/api/Item","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Item","url":"/api/Item#properties","content":" "},{"title":"Position​","type":1,"pageTitle":"Item","url":"/api/Item#Position","content":"&lt;/&gt; Item.Position: Vector2  The position of the Item in a grid ItemManager.  "},{"title":"PositionChanged​","type":1,"pageTitle":"Item","url":"/api/Item#PositionChanged","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Item.PositionChanged: RBXScriptSignal  An event signal that fires every time the Item has it's position changed.  "},{"title":"Size​","type":1,"pageTitle":"Item","url":"/api/Item#Size","content":"&lt;/&gt; Item.Size: Vector2  The size of the Item in a grid ItemManager.  "},{"title":"Rotation​","type":1,"pageTitle":"Item","url":"/api/Item#Rotation","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Item.Rotation: number The current rotation of the item. Use Item:Rotate() to edit.  "},{"title":"PotentialRotation​","type":1,"pageTitle":"Item","url":"/api/Item#PotentialRotation","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Item.PotentialRotation: number The rotation that will be applied if a successful move goes through.  "},{"title":"ItemManager​","type":1,"pageTitle":"Item","url":"/api/Item#ItemManager","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Item.ItemManager: ItemManagerObject? The current ItemManger that the Item is in.  "},{"title":"ItemManagerChanged​","type":1,"pageTitle":"Item","url":"/api/Item#ItemManagerChanged","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Item.ItemManagerChanged: RBXScriptSignal  An event signal that fires every time the Item is moved in a new ItemManager.  "},{"title":"HoveringItemManager​","type":1,"pageTitle":"Item","url":"/api/Item#HoveringItemManager","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Item.HoveringItemManager: ItemManagerObject? The ItemManager that the Item is hovering over. ItemManagers need to be linked via TranferLinks to register as a hoverable ItemManager.  "},{"title":"HoveringItemManagerChanged​","type":1,"pageTitle":"Item","url":"/api/Item#HoveringItemManagerChanged","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Item.HoveringItemManagerChanged: RBXScriptSignal  An event signal that fires every time the Item is hovering over a new ItemManager.  "},{"title":"MoveMiddleware​","type":1,"pageTitle":"Item","url":"/api/Item#MoveMiddleware","content":"&lt;/&gt; Item.MoveMiddleware: (( movedItem: Item, newGridPosition: Vector2 , lastItemManager: ItemManager, newItemManager: ItemManager ) → boolean)? A callback function where you can do additional move checks. The Item will be automatically moved back if the callback function returns false. "},{"title":"Functions​","type":1,"pageTitle":"Item","url":"/api/Item#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Item","url":"/api/Item#new","content":"&lt;/&gt; Item.new(properties: Types.ItemProperties) → Types.ItemObject Creates a new Item object.  "},{"title":"Rotate​","type":1,"pageTitle":"Item","url":"/api/Item#Rotate","content":"&lt;/&gt; Item:Rotate(quartersOf360: number) → () Rotates the Item, has to be dragged to be rotatable.  "},{"title":"SetItemManager​","type":1,"pageTitle":"Item","url":"/api/Item#SetItemManager","content":"&lt;/&gt; Item:SetItemManager(itemManager: Types.ItemManagerObject) → () Moves an item to a new ItemManager. This should only be used for transferring Items between ItemManagers that aren't linked using TranferLinks.  "},{"title":"Destroy​","type":1,"pageTitle":"Item","url":"/api/Item#Destroy","content":"&lt;/&gt; Item:Destroy() → () Destroy the Item object. "},{"title":"ItemManager","type":0,"sectionRef":"#","url":"/api/ItemManager","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#properties","content":" "},{"title":"Visible​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#Visible","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ItemManager.Visible: boolean If the ItemManager is visible or not, disables all interactions with Items. Should not be edited, use ItemManager:SetVisibility() to change it.  "},{"title":"VisibilityChanged​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#VisibilityChanged","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; ItemManager.VisibilityChanged: RBXScriptSignal  An event signal that fires every time the ItemManager's visibility changes.  "},{"title":"Highlights​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#Highlights","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ItemManager.Highlights: {HighlightObject} All of the Highlights that are currently on the ItemManager. Use ItemManager:CreateHighlight(), ItemManager:AddHighlight() or ItemManager:RemoveHighlight() to edit.  "},{"title":"ConnectedTransferLinks​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#ConnectedTransferLinks","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ItemManager.ConnectedTransferLinks: {TransferLinkObject} All of the TransferLinks that are currently connected to the ItemManager.  "},{"title":"TransferLinkConnected​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#TransferLinkConnected","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; ItemManager.TransferLinkConnected: RBXScriptSignal  An event signal that fires every time a new TransferLink is connected to the ItemManager.  "},{"title":"TransferLinkDisconnected​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#TransferLinkDisconnected","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; ItemManager.TransferLinkDisconnected: RBXScriptSignal  An event signal that fires every time a new TransferLink is disconnected from the ItemManager.  "},{"title":"Metadata​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#Metadata","content":"&lt;/&gt; ItemManager.Metadata: {any} Any custom data that you would want to store. "},{"title":"Functions​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#functions","content":" "},{"title":"GetOffset​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#GetOffset","content":"&lt;/&gt; ItemManager:GetOffset(itemRotation: number) → Vector2  Gets the AbsolutePosition property from the ItemManager's GUI element.  "},{"title":"GetSizeScale​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#GetSizeScale","content":"&lt;/&gt; ItemManager:GetSizeScale() → Vector2  Gets the AbsoluteSize of one slot.  "},{"title":"GetAbsoluteSizeFromItemSize​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#GetAbsoluteSizeFromItemSize","content":"&lt;/&gt; ItemManager:GetAbsoluteSizeFromItemSize( itemSize: Vector2 , itemRotation: number ) → Vector2  Gets the AbsoluteSize of an Item with the ItemManager's size scale.  "},{"title":"GetItemManagerPositionFromAbsolutePosition​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#GetItemManagerPositionFromAbsolutePosition","content":"&lt;/&gt; ItemManager:GetItemManagerPositionFromAbsolutePosition( absolutePosition: Vector2 , itemSize: Vector2 , itemRotation: number ) → Vector2  Converts an AbsolutePosition to a ItemManager position.  "},{"title":"IsColliding​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#IsColliding","content":"&lt;/&gt; ItemManager:IsColliding( item: Types.ItemObject, ignoredItems: {Types.ItemObject}, at: Vector2? ) → boolean Checks if an Item is colliding. Use the at parameter to override the collision check position, else it will use the Item's position.  "},{"title":"RemoveItem​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#RemoveItem","content":"&lt;/&gt; ItemManager:RemoveItem(item: Types.ItemObject) → () Removes an item from the ItemManager.  "},{"title":"SetVisibility​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#SetVisibility","content":"&lt;/&gt; ItemManager:SetVisibility(isVisible: boolean) → () Sets the visibility property on all GUI elements and disables interactivity on all Items in the ItemManager.  "},{"title":"ConnectTransferLink​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#ConnectTransferLink","content":"&lt;/&gt; ItemManager:ConnectTransferLink(transferLink: Types.TransferLinkObject) → () Connect a TranferLink. Allows tranferring Items between all of the ItemManagers that the TransferLink is connected to.  "},{"title":"DisconnectTransferLink​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#DisconnectTransferLink","content":"&lt;/&gt; ItemManager:DisconnectTransferLink(transferLink: Types.TransferLinkObject) → () Disconnect a TransferLink.  "},{"title":"CreateHighlight​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#CreateHighlight","content":"&lt;/&gt; ItemManager:CreateHighlight( priority: number, position: Vector2 , size: Vector2 , color: Color3 ) → Types.HighlightObject Creates a new Highlight, used for highlighting where an Item will be dropped. Highlights are not only limited to Item dropping and can be used to highlight anything! Use ItemManager:AddHighlight() to add an already existing highlight.  "},{"title":"AddHighlight​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#AddHighlight","content":"&lt;/&gt; ItemManager:AddHighlight( priority: number, highlight: Types.HighlightObject ) → () Adds an already existing highlight, use ItemManager:CreateHighlight() to create a new Highlight.  "},{"title":"RemoveHighlight​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#RemoveHighlight","content":"&lt;/&gt; ItemManager:RemoveHighlight(highlight: Types.HighlightObject) → () Removes a Highlight from the ItemManager.  "},{"title":"Destroy​","type":1,"pageTitle":"ItemManager","url":"/api/ItemManager#Destroy","content":"&lt;/&gt; ItemManager:Destroy() → () Destroys the ItemManager. "},{"title":"Highlight","type":0,"sectionRef":"#","url":"/api/Highlight","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#properties","content":" "},{"title":"Position​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#Position","content":"&lt;/&gt; Highlight.Position: Vector2  The Grid position of the Highlight.  "},{"title":"Size​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#Size","content":"&lt;/&gt; Highlight.Size: Vector2  The Grid size of the Highlight.  "},{"title":"Color​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#Color","content":"&lt;/&gt; Highlight.Color: Color3  The color of the Highlight.  "},{"title":"ItemManager​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#ItemManager","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Highlight.ItemManager: ItemManagerObject The current ItemManager that the Highlight effects. Change via Highlight:SetItemManager().  "},{"title":"ItemManagerChanged​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#ItemManagerChanged","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Highlight.ItemManagerChanged: RBXScriptSignal  An event signal that fires every time the ItemManager is switched. "},{"title":"Functions​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#new","content":"&lt;/&gt; Highlight.new(properties: Types.HighlightProperties) → Types.HighlightObject Creates a new Highlight object  "},{"title":"SetItemManager​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#SetItemManager","content":"&lt;/&gt; Highlight:SetItemManager( priority: number, itemManager: Types.ItemManagerObject ) → () Change the ItemManager that the Highlight effects.  "},{"title":"Destroy​","type":1,"pageTitle":"Highlight","url":"/api/Highlight#Destroy","content":"&lt;/&gt; Highlight:Destroy() → () Destroy the Highlight object. "}]