"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[902],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59952:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const a={},o="Basic Inventory",s={unversionedId:"basics",id:"basics",title:"Basic Inventory",description:"Creating Your First Grid",source:"@site/docs/02-basics.md",sourceDirName:".",slug:"/basics",permalink:"/docs/basics",draft:!1,editUrl:"https://github.com/Frexsim/grid-pack/edit/main/docs/02-basics.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/docs/intro"},next:{title:"Other ItemManager Types",permalink:"/docs/itemmanagers"}},c={},l=[{value:"Creating Your First Grid",id:"creating-your-first-grid",level:2},{value:"Adding Items",id:"adding-items",level:2}],d={toc:l},u="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-inventory"},"Basic Inventory"),(0,i.kt)("h2",{id:"creating-your-first-grid"},"Creating Your First Grid"),(0,i.kt)("p",null,"When creating your first Grid ItemManager the ",(0,i.kt)("inlineCode",{parentName:"p"},".createGrid()")," method will be your friend! With it you will want to specify all of the different properties of your Grid. If you've ever used Roact or Fusion this may seem familiar."),(0,i.kt)("p",null,"Here is an example of it in action:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local GridPack = require(game:GetService("ReplicatedStorage").Packages.GridPack)\n\nlocal screenGui = Instance.new("ScreenGui")\nscreenGui.Name = "GridPack"\nscreenGui.ResetOnSpawn = false\nscreenGui.Parent = game:GetService("Players").LocalPlayer.PlayerGui\n\nlocal myFirstGrid = GridPack.createGrid({\n    Parent = screenGui, -- Parent of the grid container.\n\n    Visible = true -- If the grid is visible, changes the containers visible property. Also disables item interaction on all items inside. BY DEFAULT THIS IS SET TO FALSE to prevent the inventory being shown when first creating the Grid.\n\n    Assets = {\n        Slot = nil -- Add your own GuiObject here to customize the slots in the grid.\n    }\n\n    GridSize = Vector2.new(8, 15), -- How many slots the grid has on the X and Y axes.\n    SlotAspectRatio = 1, -- Aspect ratio of one slot in the grid, helps with different resolutions if you\'re using scale instead of offset.\n\n    AnchorPoint = Vector2.new(0, 0.5), -- Anchor point of the grid container.\n    Position = UDim2.new(0, 20, 0.5, 0), -- Position of the grid container.\n    Size = UDim2.fromScale(0.25, 0.5), -- Size of the grid container.\n    \n    Metadata = {\n        -- Here you are free to store any values you want.\n    }\n})\n')),(0,i.kt)("p",null,"You should now have a Grid on your screen once you join the game!"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(37856).Z,width:"308",height:"562"})),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If the example above doesn't work for you, please check that the script is a LocalScript and is located in a client script compatible directory (StarterPlayer.StarterPlayerScripts is recommended!). If it still doesn't work, please make sure that the script is not a normal script with RunContext set to Client, and is instead a LocalScript!")),(0,i.kt)("h2",{id:"adding-items"},"Adding Items"),(0,i.kt)("p",null,"Adding items to grids is straight forward. But before adding an Item you will ofcourse have to create it! This is done in a simmilar way as creating a grid, only instead you use the ",(0,i.kt)("inlineCode",{parentName:"p"},".createItem()")," method which also comes with different properties."),(0,i.kt)("p",null,"Here is an example showing an item being created and added to the grid we just created:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- Continuing from last example.\n\nlocal myFirstItem = GridPack.createItem({\n    Position = Vector2.new(0, 0), -- Position in a Grid.\n    Size = Vector.new(2, 3), -- Size in a Grid.\n\n    Assets = {\n        Item = nil, -- Add a custom GuiObject here to change the item's gui element.\n    },\n    \n    Metadata = {\n        -- Here you are free to store any values you want.\n    },\n})\n\nmyFirstGrid:AddItem(myFirstItem) -- Add the item to the Grid.\n")),(0,i.kt)("p",null,"The item should now be added to the grid and should also be draggable!"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(45348).Z,width:"306",height:"561"})))}p.isMDXComponent=!0},37856:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/MyFirstGrid-8899b98e89630b5a4bae59027a326a17.png"},45348:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/MyFirstItem-60c8b99d88fd84491fd173df82aa4437.png"}}]);